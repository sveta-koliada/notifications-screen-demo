// –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è crypto.randomUUID –µ—Å–ª–∏ –æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
if (typeof crypto !== 'undefined' && typeof crypto.randomUUID !== 'function') {
    crypto.randomUUID = function() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
}

document.addEventListener('DOMContentLoaded', () => {
    const toggleSwitch = document.getElementById('notificationToggle');
    const notificationsContainer = document.getElementById('notificationsContainer');
    const container = document.querySelector('.container');
    const toggleContainer = document.querySelector('.toggle-container');
    let notifications = [];
    let notificationInterval;
    let isActive = true;
    let nextZIndex = 100; // Start z-index for notifications higher than CSS default

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º z-index –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã—à–µ —á–µ–º —É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    notificationsContainer.style.zIndex = "1000"; // –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ z-index –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    
    // Function to get visual viewport height (dvh equivalent)
    function getViewportHeight() {
        return window.innerHeight;
    }

    // App data for random notifications
    const apps = [
        {
            name: 'Instagram',
            icon: 'instagram-icon',
            messages: [
                'liked your photo.',
                'started following you.',
                'commented on your post: "Amazing! üî•"',
                'mentioned you in their story.',
                'sent you a message.',
                'sent you a reel.',
                'is now following you and 3 others.',
                'commented: "Love this! üíï"',
                'wants to tag you in a post.',
                'is going live now!',
                'shared a post: "Check this out"',
                'replied to your comment: "Thanks!"'
            ]
        },
        {
            name: 'TikTok',
            icon: 'tiktok-icon',
            messages: [
                'Your video is trending!',
                'liked your comment.',
                'replied to your comment.',
                'mentioned you in a video.',
                'New follower alert!',
                'started a LIVE video.',
                'shared your video.',
                'added your sound to their video.',
                'duetted with you!',
                'Your video went viral! 10K views',
                'posted a new video.',
                'commented: "This is everything üòÇ"'
            ]
        },
        {
            name: 'Facebook',
            icon: 'facebook-icon',
            messages: [
                'tagged you in a post.',
                'commented on your status.',
                'sent you a friend request.',
                'invited you to an event.',
                'went live: "Check out my stream!"',
                'shared a memory with you.',
                'reacted to your photo.',
                'sent you a message.',
                'commented on a post you\'re tagged in.',
                'added a new photo.',
                'wants you to like their page.',
                'is nearby.'
            ]
        }
    ];

    // Names for random notification generation
    const names = [
        'Emma', 'Liam', 'Olivia', 'Noah', 'Ava', 
        'Jackson', 'Sophia', 'Lucas', 'Isabella', 'Aiden',
        'Mia', 'Elijah', 'Harper', 'Ethan', 'Amelia',
        'Alex', 'Sofia', 'David', 'Zoe', 'James',
        'Lily', 'Benjamin', 'Charlotte', 'Daniel', 'Grace',
        'Matthew', 'Emily', 'Michael', 'Abigail', 'Jacob'
    ];

    // Random time strings
    const times = [
        'now', '1m ago', '2m ago', '5m ago', 'just now', 
        '3m ago', '1m', '30s ago', 'just now', '4m ago'
    ];

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const NOTIFICATION_WIDTH = 380; // –®–∏—Ä–∏–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (px)
    const NOTIFICATION_GAP = 4; // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (px)
    const BOTTOM_MARGIN = 20; // –û—Ç—Å—Ç—É–ø –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞ (px)
    const TOGGLE_MARGIN = 0; // –û—Ç—Å—Ç—É–ø, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è (0px - —Ç–æ—á–Ω–æ –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã)
    const MAX_VISIBLE_NOTIFICATIONS = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    // Create and add a notification
    function createNotification() {
        if (!isActive) return;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const app = apps[Math.floor(Math.random() * apps.length)];
        const name = names[Math.floor(Math.random() * names.length)];
        const message = app.messages[Math.floor(Math.random() * app.messages.length)];
        const time = times[Math.floor(Math.random() * times.length)];
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        const viewportWidth = window.innerWidth;
        const viewportHeight = getViewportHeight();
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.style.zIndex = nextZIndex++; // Assign and increment z-index
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä—è–º–æ–π —Å—Ç–∏–ª—å (iOS-style)
        notification.style.borderRadius = '14px';
        notification.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.15)';
        notification.style.width = `${NOTIFICATION_WIDTH}px`;
        notification.style.margin = '0 auto'; // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML
        notification.innerHTML = `
            <div class="notification-icon ${app.icon}"></div>
            <div class="notification-content">
                <div class="notification-header">
                    <div class="notification-app">${app.name}</div>
                    <div class="notification-time">${time}</div>
                </div>
                <div class="notification-message"><strong>${name}</strong> ${message}</div>
            </div>
        `;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é - —Å–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
        const centerX = (viewportWidth - NOTIFICATION_WIDTH) / 2;
        const startY = viewportHeight + 10; // –ù–∞—á–∏–Ω–∞–µ–º —á—É—Ç—å –Ω–∏–∂–µ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        notification.style.left = '50%';
        notification.style.transform = 'translateX(-50%)';
        notification.style.top = `${startY}px`;
        notification.style.opacity = '0';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        notificationsContainer.appendChild(notification);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        const notificationHeight = notification.offsetHeight;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications.push(notification);
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤—Ö–æ–¥ –∏ —Å–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        animateNotificationsStack(notification, notificationHeight);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        checkNotificationsLimit();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö
    function checkNotificationsLimit() {
        if (notifications.length > MAX_VISIBLE_NOTIFICATIONS) {
            // –ù—É–∂–Ω–æ —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const notificationsToRemove = notifications.slice(0, notifications.length - MAX_VISIBLE_NOTIFICATIONS);
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notificationsToRemove.forEach((notification, index) => {
                gsap.to(notification, {
                    opacity: 0,
                    x: -100, // –ò—Å—á–µ–∑–∞—é—Ç –≤–ª–µ–≤–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                    duration: 0.3,
                    delay: index * 0.05, // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–∞—Å–∫–∞–¥–∞
                    ease: 'power2.in',
                    onComplete: () => {
                        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ DOM
                        notification.remove();
                        // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
                        const notificationIndex = notifications.indexOf(notification);
                        if (notificationIndex !== -1) {
                            notifications.splice(notificationIndex, 1);
                        }
                    }
                });
            });
        }
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–µ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —É–ø—Ä—É–≥–æ—Å—Ç—å—é
    function animateNotificationsStack(newNotification, newNotificationHeight) {
        const viewportHeight = getViewportHeight();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å–µ–≥–æ —Å—Ç–µ–∫–∞
        updateNotificationStack();
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤—Ö–æ–¥–∞ —Å –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π –ø—Ä—É–∂–∏–Ω–æ–π
        gsap.fromTo(newNotification, 
            { y: 30, opacity: 0, scale: 0.95 },
            { 
                y: 0, 
                opacity: 1,
                scale: 1,
                duration: 0.5, 
                ease: 'elastic.out(1, 0.7)' // –ë–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–π —É–ø—Ä—É–≥–∏–π —ç—Ñ—Ñ–µ–∫—Ç
            }
        );
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ toggle
    function getTogglePosition() {
        const toggleRect = toggleContainer.getBoundingClientRect();
        return {
            top: toggleRect.top,
            bottom: toggleRect.bottom,
            height: toggleRect.height
        };
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é toggle –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const initialTogglePosition = getTogglePosition();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ–≥–æ —Å—Ç–µ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    function updateNotificationStack() {
        const viewportHeight = getViewportHeight();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é toggle –≤–º–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π
        const togglePos = initialTogglePosition;
        
        // –ö–æ–ø–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å –Ω–∏–∂–Ω–µ–≥–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ) –∫ –≤–µ—Ä—Ö–Ω–µ–º—É
        const notificationsReversed = [...notifications].reverse();
        
        let currentY = viewportHeight - BOTTOM_MARGIN;
        const fadeZoneSize = 2; // –†–∞–∑–º–µ—Ä –∑–æ–Ω—ã –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è (–≤ –≤—ã—Å–æ—Ç–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É (–Ω–µ –¥–æ—Ö–æ–¥—è –¥–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è)
        const safeTopBoundary = togglePos.bottom + TOGGLE_MARGIN;
        
        // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ z-index –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "—É—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ"
        // –ù–∏–∂–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –±–æ–ª—å—à–∏–π z-index —á–µ–º –≤–µ—Ä—Ö–Ω–∏–µ
        let currentZindex = 100 + notificationsReversed.length;
        
        notificationsReversed.forEach((notification, index) => {
            notification.style.zIndex = currentZindex--;
        });
        
        // –ü–æ–º–µ—á–∞–µ–º, –±—ã–ª–æ –ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        let reachedTopLimit = false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å—Ç–µ–∫–µ
        notificationsReversed.forEach((notification, index) => {
            const notificationHeight = notification.offsetHeight;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ Y (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
            currentY -= notificationHeight;
            
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
            if (index > 0) {
                currentY -= NOTIFICATION_GAP;
            }
            
            // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–ª–æ –≥—Ä–∞–Ω–∏—Ü—ã toggle, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–∫
            // –∏ –¥–µ–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–≤–∏–¥–∏–º—ã–º
            if (reachedTopLimit) {
                gsap.set(notification, { opacity: 0, scale: 0.8, z: -30 });
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –ª–∏ –≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–æ–Ω—ã toggle
            if (currentY < safeTopBoundary) {
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–ª–æ –≥—Ä–∞–Ω–∏—Ü—ã toggle
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Ä–æ–≤–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
                currentY = safeTopBoundary;
                
                // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∏–≥–ª–∏ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
                reachedTopLimit = true;
                
                // –ê–Ω–∏–º–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É—Ö–æ–¥–∞ –Ω–∞–∑–∞–¥
                gsap.to(notification, {
                    opacity: 0,
                    scale: 0.8,
                    z: -30,
                    duration: 0.3,
                    ease: 'power2.out'
                });
            } else {
                // –î–ª—è –≤–∏–¥–∏–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
                gsap.to(notification, { 
                    opacity: 1, 
                    scale: 1,
                    z: 0,
                    duration: 0.3,
                    ease: 'power1.out'
                });
            }
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å –ª–µ–≥–∫–æ–π —É–ø—Ä—É–≥–æ—Å—Ç—å—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            gsap.to(notification, {
                top: currentY,
                duration: 0.3,
                ease: index === 0 ? 'power2.out' : 'back.out(1.3)' // –£—Å–∏–ª–∏–≤–∞–µ–º —É–ø—Ä—É–≥–æ—Å—Ç—å
            });
        });
    }

    // Handle toggle switch with enhanced effects
    toggleSwitch.addEventListener('change', () => {
        if (toggleSwitch.checked) {
            // Toggle is ON - clear notifications
            isActive = false;
            clearInterval(notificationInterval);
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–Ω–∏–∑ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            const notificationsToClear = [...notifications];
            
            gsap.to(notificationsToClear, {
                y: 100, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–∂–Ω–µ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤–Ω–∏–∑
                opacity: 0,
                duration: 0.4,
                stagger: 0.05, // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                ease: "power2.in",
                onComplete: () => {
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    notificationsToClear.forEach(notification => notification.remove());
                    notifications = []; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
                }
            });
        } else {
            // Toggle is OFF - start generating notifications
            isActive = true;
            
            // Reset z-index counter
            nextZIndex = 100;
            
            // Start generating new notifications
            startNotifications();
        }
    });

    // Start generating notifications
    function startNotifications() {
        // Generate notifications with a reasonable interval
        for (let i = 0; i < 5; i++) {
            setTimeout(() => createNotification(), i * 700);
        }
        
        // Generate notifications periodically
        notificationInterval = setInterval(() => {
            if (notifications.length < 30) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –≤–µ—Ä—Ö–Ω–∏–µ —É–¥–∞–ª—è—é—Ç—Å—è
                createNotification();
            }
        }, 2000); // –ë–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
    }

    // Update on resize
    window.addEventListener('resize', () => {
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        setTimeout(updateNotificationStack, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    });
    
    // Start generating notifications when page loads
    startNotifications();
}); 
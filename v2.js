// –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è crypto.randomUUID –µ—Å–ª–∏ –æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
if (typeof crypto !== 'undefined' && typeof crypto.randomUUID !== 'function') {
    crypto.randomUUID = function() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
}

document.addEventListener('DOMContentLoaded', () => {
    const toggleSwitch = document.getElementById('notificationToggle');
    const notificationsContainer = document.getElementById('notificationsContainer');
    const container = document.querySelector('.container');
    let notifications = [];
    let notificationInterval;
    let isActive = true;
    let nextZIndex = 100; // Start z-index for notifications higher than CSS default
    let angleHistory = []; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–≥–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –æ–±–ª–∞—Å—Ç—è–º

    // Function to get visual viewport height (dvh equivalent)
    function getViewportHeight() {
        return window.innerHeight;
    }

    // App data for random notifications
    const apps = [
        {
            name: 'Instagram',
            icon: 'instagram-icon',
            messages: [
                'liked your photo.',
                'started following you.',
                'commented on your post: "Amazing! üî•"',
                'mentioned you in their story.',
                'sent you a message.',
                'sent you a reel.',
                'is now following you and 3 others.',
                'commented: "Love this! üíï"',
                'wants to tag you in a post.',
                'is going live now!',
                'shared a post: "Check this out"',
                'replied to your comment: "Thanks!"'
            ]
        },
        {
            name: 'TikTok',
            icon: 'tiktok-icon',
            messages: [
                'Your video is trending!',
                'liked your comment.',
                'replied to your comment.',
                'mentioned you in a video.',
                'New follower alert!',
                'started a LIVE video.',
                'shared your video.',
                'added your sound to their video.',
                'duetted with you!',
                'Your video went viral! 10K views',
                'posted a new video.',
                'commented: "This is everything üòÇ"'
            ]
        },
        {
            name: 'Facebook',
            icon: 'facebook-icon',
            messages: [
                'tagged you in a post.',
                'commented on your status.',
                'sent you a friend request.',
                'invited you to an event.',
                'went live: "Check out my stream!"',
                'shared a memory with you.',
                'reacted to your photo.',
                'sent you a message.',
                'commented on a post you\'re tagged in.',
                'added a new photo.',
                'wants you to like their page.',
                'is nearby.'
            ]
        }
    ];

    // Names for random notification generation
    const names = [
        'Emma', 'Liam', 'Olivia', 'Noah', 'Ava', 
        'Jackson', 'Sophia', 'Lucas', 'Isabella', 'Aiden',
        'Mia', 'Elijah', 'Harper', 'Ethan', 'Amelia',
        'Alex', 'Sofia', 'David', 'Zoe', 'James',
        'Lily', 'Benjamin', 'Charlotte', 'Daniel', 'Grace',
        'Matthew', 'Emily', 'Michael', 'Abigail', 'Jacob'
    ];

    // Random time strings
    const times = [
        'now', '1m ago', '2m ago', '5m ago', 'just now', 
        '3m ago', '1m', '30s ago', 'just now', '4m ago'
    ];

    // Create and add a notification
    function createNotification() {
        if (!isActive) return;
        
        // Create shine animation on random notifications already in view
        if (notifications.length > 0 && Math.random() > 0.7) {
            animateRandomShine();
        }
        
        const app = apps[Math.floor(Math.random() * apps.length)];
        const name = names[Math.floor(Math.random() * names.length)];
        const message = app.messages[Math.floor(Math.random() * app.messages.length)];
        const time = times[Math.floor(Math.random() * times.length)];
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        const viewportWidth = window.innerWidth;
        const viewportHeight = getViewportHeight();
        const safeZoneHeight = viewportHeight - 20; // Account for 20px bottom margin
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º —á–∞—Å—Ç–∏—á–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
        const extraSpace = 100; // –ü–∏–∫—Å–µ–ª–µ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç–∫—Ä–∞–Ω–∞
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        const gridCols = 5;
        const gridRows = 5; 
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —è—á–µ–µ–∫, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ –ø–æ –∫—Ä–∞—è–º
        const cellWidth = (viewportWidth - 340) / gridCols;
        const cellHeight = (safeZoneHeight * 0.9) / gridRows;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        let densityMap = Array(gridRows).fill().map(() => Array(gridCols).fill(0));
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–µ —Å —É—á–µ—Ç–æ–º —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
        notifications.forEach(notif => {
            const rect = notif.getBoundingClientRect();
            const centerX = rect.left + rect.width / 2;
            const centerY = rect.top + rect.height / 2;
            
            const col = Math.min(Math.floor(centerX / cellWidth), gridCols - 1);
            const row = Math.min(Math.floor(centerY / cellHeight), gridRows - 1);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π —è—á–µ–π–∫–∏, –Ω–æ –∏ –¥–ª—è —Å–æ—Å–µ–¥–Ω–∏—Ö
            for (let r = Math.max(0, row - 1); r <= Math.min(gridRows - 1, row + 1); r++) {
                for (let c = Math.max(0, col - 1); c <= Math.min(gridCols - 1, col + 1); c++) {
                    // –ë–ª–∏–∂–∞–π—à–∏–µ —è—á–µ–π–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
                    const distance = Math.sqrt(Math.pow(r - row, 2) + Math.pow(c - col, 2));
                    const weight = 1 / (distance + 0.5); // –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    densityMap[r][c] += weight;
                }
            }
        });
        
        // –ù–∞—Ö–æ–¥–∏–º —è—á–µ–π–∫–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let minDensity = Infinity;
        let candidateCells = [];
        
        for (let row = 0; row < gridRows; row++) {
            for (let col = 0; col < gridCols; col++) {
                const density = densityMap[row][col];
                
                if (density < minDensity) {
                    minDensity = density;
                    candidateCells = [{row, col}];
                } else if (density === minDensity) {
                    candidateCells.push({row, col});
                }
            }
        }
        
        // –ï—Å–ª–∏ —ç–∫—Ä–∞–Ω –ø—É—Å—Ç–æ–π, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —è—á–µ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É –∏–ª–∏ –≤–µ—Ä—Ö–Ω–∏–º —É–≥–ª–∞–º
        if (minDensity === 0 && candidateCells.length > 5) {
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–∞–∂–Ω—ã—Ö —Ç–æ—á–µ–∫ (—Ü–µ–Ω—Ç—Ä –∏ —É–≥–ª—ã)
            candidateCells = candidateCells.map(cell => {
                // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞
                const centerDistance = Math.sqrt(
                    Math.pow(cell.row - gridRows/2, 2) + 
                    Math.pow(cell.col - gridCols/2, 2)
                );
                
                // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–µ—Ä—Ö–Ω–∏—Ö —É–≥–ª–æ–≤
                const topLeftDistance = Math.sqrt(
                    Math.pow(cell.row, 2) + 
                    Math.pow(cell.col, 2)
                );
                const topRightDistance = Math.sqrt(
                    Math.pow(cell.row, 2) + 
                    Math.pow(cell.col - (gridCols-1), 2)
                );
                
                // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —è—á–µ–π–∫–∏
                // –ú–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –ª—É—á—à–µ –ø–æ–∑–∏—Ü–∏—è
                const score = Math.min(
                    centerDistance * 0.8,  // –¶–µ–Ω—Ç—Ä —Å –±–æ–ª—å—à–∏–º –≤–µ—Å–æ–º
                    topLeftDistance * 1.2,  
                    topRightDistance * 1.2
                );
                
                return {...cell, score};
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ü–µ–Ω–∫–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ
            candidateCells.sort((a, b) => a.score - b.score);
            candidateCells = candidateCells.slice(0, 5);
        }
        
        // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–º–µ–Ω–µ–µ –ø–ª–æ—Ç–Ω—ã—Ö —è—á–µ–µ–∫
        const selectedCell = candidateCells[Math.floor(Math.random() * candidateCells.length)];
        const selectedRow = selectedCell.row;
        const selectedCol = selectedCell.col;
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ –∑–∞ —ç–∫—Ä–∞–Ω
        // –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏
        const baseX = selectedCol * cellWidth;
        const baseY = selectedRow * cellHeight;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º extraSpace
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–Ω—å—à–µ -extraSpace/3 (—á—Ç–æ–±—ã –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ —ç–∫—Ä–∞–Ω)
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ + extraSpace/3
        const minX = Math.max(-extraSpace/3, baseX);
        const minY = Math.max(-extraSpace/3, baseY);
        const maxX = Math.min(viewportWidth - 340 + extraSpace/3, baseX + cellWidth);
        const maxY = Math.min(safeZoneHeight + extraSpace/3, baseY + cellHeight);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
        const randomX = minX + Math.random() * (maxX - minX);
        const randomY = minY + Math.random() * (maxY - minY);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–≥–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –æ–±–ª–∞—Å—Ç–∏, –∏–∑–±–µ–≥–∞—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        // –°–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ —É–≥–ª—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ
        const usedAngles = angleHistory
            .filter(item => item.cell === selectedCell.row * gridCols + selectedCell.col)
            .map(item => item.angle);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª, –∏–∑–±–µ–≥–∞—è –±–ª–∏–∑–∫–∏—Ö –∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º
        // –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–æ ¬±20 –≥—Ä–∞–¥—É—Å–æ–≤ (–±—ã–ª–æ ¬±35)
        let initialRotation;
        let attempts = 0;
        do {
            initialRotation = Math.random() * 40 - 20; // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç -20 –¥–æ 20 –≥—Ä–∞–¥—É—Å–æ–≤
            attempts++;
            
            // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª
            if (attempts > 10) break;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–ª–∏–∑–∫–æ –∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º —É–≥–ª–∞–º
        } while (usedAngles.some(angle => Math.abs(angle - initialRotation) < 15));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —É–≥–æ–ª –≤ –∏—Å—Ç–æ—Ä–∏–∏
        angleHistory.push({
            cell: selectedCell.row * gridCols + selectedCell.col,
            angle: initialRotation
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (angleHistory.length > 50) {
            angleHistory.shift();
        }
        
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.style.zIndex = nextZIndex++; // Assign and increment z-index
        
        notification.innerHTML = `
            <div class="notification-icon ${app.icon}"></div>
            <div class="notification-content">
                <div class="notification-header">
                    <div class="notification-app">${app.name}</div>
                    <div class="notification-time">${time}</div>
                </div>
                <div class="notification-message"><strong>${name}</strong> ${message}</div>
            </div>
        `;
        
        // Set initial position with absolute positioning
        notification.style.left = randomX + 'px';
        notification.style.top = randomY + 'px';
        notification.style.transform = `rotate(${initialRotation}deg)`;
        notification.style.opacity = '0';
        notification.style.scale = '0.5';
        
        notificationsContainer.appendChild(notification);
        
        // Get actual dimensions after rendering
        const notificationHeight = notification.offsetHeight;
        
        // Remove if it won't fit in the safe zone
        const maxSafeHeight = safeZoneHeight * 0.8;
        if (notificationHeight > maxSafeHeight) {
            notification.remove();
            return;
        }
        
        notifications.push(notification);
        
        // Create appearance effect with tiny particles
        createAppearanceParticles(randomX + notification.offsetWidth/2, randomY + notification.offsetHeight/2);
        
        // Animate the notification with spring physics
        animateNotification(notification, randomX, randomY, initialRotation, notificationHeight, safeZoneHeight);
    }

    // Create particles around a point for appearance effect
    function createAppearanceParticles(x, y) {
        const particleCount = 6 + Math.floor(Math.random() * 6); // 6-12 particles
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            // Random size and opacity
            const size = Math.random() * 4 + 2; // 2-6px
            const opacity = Math.random() * 0.6 + 0.4; // 0.4-1
            
            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;
            particle.style.opacity = opacity;
            particle.style.left = `${x}px`;
            particle.style.top = `${y}px`;
            
            container.appendChild(particle);
            
            // Animate particles outward in a star pattern
            const angle = (i / particleCount) * Math.PI * 2;
            const distance = 30 + Math.random() * 30;
            const duration = 0.6 + Math.random() * 0.4;
            
            gsap.to(particle, {
                x: Math.cos(angle) * distance,
                y: Math.sin(angle) * distance,
                opacity: 0,
                duration: duration,
                ease: 'power1.out',
                onComplete: () => {
                    particle.remove();
                }
            });
        }
    }

    // Animate a random shine effect on a notification
    function animateRandomShine() {
        if (notifications.length === 0) return;
        
        const randomIndex = Math.floor(Math.random() * notifications.length);
        const notification = notifications[randomIndex];
        
        // Create the animation using GSAP
        gsap.fromTo(notification, 
            { '--shine-position': '-100%' },
            { 
                '--shine-position': '200%',
                duration: 1.5,
                ease: 'power2.inOut',
                onStart: () => {
                    notification.classList.add('shine-active');
                },
                onComplete: () => {
                    notification.classList.remove('shine-active');
                }
            }
        );
    }

    // Animate notification with improved spring physics - make notifications stay on screen
    function animateNotification(notification, x, y, rotation, notificationHeight, safeZoneHeight) {
        // Calculate better random position with more spread across the screen
        const viewportWidth = window.innerWidth;
        const maxBottomY = safeZoneHeight - notificationHeight;
        
        // Calculate final position with more distribution to avoid too much overlap
        const notificationCount = notifications.length;
        const spreadFactor = Math.min(notificationCount * 0.05, 0.7); // Max 0.7
        
        // Simple animation to make notifications appear
        gsap.fromTo(notification, 
            { opacity: 0, scale: 0.5 },
            {
                opacity: 1,
                scale: 1,
                duration: 0.4,
                ease: 'back.out(1.7)',
                onComplete: () => {
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–≥–ª—ã –ø–æ–≤–æ—Ä–æ—Ç–∞
                    // 70% —à–∞–Ω—Å –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç, 30% —à–∞–Ω—Å –Ω–∞ –±–æ–ª—å—à–∏–π –ø–æ–≤–æ—Ä–æ—Ç
                    let finalRotation;
                    if (Math.random() > 0.7) {
                        // –£–º–µ–Ω—å—à–∞–µ–º –±–æ–ª—å—à–∏–π –ø–æ–≤–æ—Ä–æ—Ç: –æ—Ç -15 –¥–æ 15 –≥—Ä–∞–¥—É—Å–æ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ (–±—ã–ª–æ ¬±25)
                        finalRotation = rotation + (Math.random() * 30 - 15);
                    } else {
                        // –û–±—ã—á–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç: –æ—Ç -5 –¥–æ 5 –≥—Ä–∞–¥—É—Å–æ–≤ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ (–±—ã–ª–æ ¬±6)
                        finalRotation = rotation + (Math.random() * 10 - 5);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–≤–æ—Ä–æ—Ç, –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è
                    gsap.to(notification, {
                        rotation: finalRotation,
                        duration: 0.8,
                        ease: 'power1.inOut'
                    });
                }
            }
        );
    }

    // Handle toggle switch with enhanced effects
    toggleSwitch.addEventListener('change', () => {
        if (toggleSwitch.checked) {
            // Toggle is ON - clear notifications with enhanced "burst" effect
            isActive = false;
            clearInterval(notificationInterval);
            
            // Create explosion particles in the center of the screen
            createExplosionEffect();
            
            // Make all notifications burst simultaneously
            notifications.forEach((notification) => {
                const notificationRect = notification.getBoundingClientRect();
                const centerX = notificationRect.left + notificationRect.width / 2;
                const centerY = notificationRect.top + notificationRect.height / 2;
                
                // Create a burst of particles at the notification's position
                createBurstParticles(centerX, centerY, 15 + Math.floor(Math.random() * 10));
            });
            
            // Animate all notifications bursting simultaneously
            gsap.to(notifications, {
                scale: 0,
                opacity: 0,
                duration: 0.3,
                ease: "back.in(2)",
                stagger: 0, // –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
                onComplete: () => {
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    notifications.forEach(notification => notification.remove());
                    notifications = [];
                }
            });
        } else {
            // Toggle is OFF - start generating notifications
            isActive = true;
            
            // Reset z-index counter
            nextZIndex = 100;
            
            // Start generating new notifications
            startNotifications();
        }
    });
    
    // Create an explosion effect in the center
    function createExplosionEffect() {
        const centerX = window.innerWidth / 2;
        const centerY = window.innerHeight / 2;
        const particleCount = 40 + Math.floor(Math.random() * 20);
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            // Random size and opacity
            const size = Math.random() * 6 + 2; // 2-8px
            const opacity = Math.random() * 0.8 + 0.2; // 0.2-1
            
            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;
            particle.style.opacity = opacity;
            particle.style.left = `${centerX}px`;
            particle.style.top = `${centerY}px`;
            
            container.appendChild(particle);
            
            // Animate particles outward in all directions
            const angle = (i / particleCount) * Math.PI * 2;
            const distance = 50 + Math.random() * 350;
            const duration = 1 + Math.random() * 1.5;
            
            gsap.to(particle, {
                x: Math.cos(angle) * distance,
                y: Math.sin(angle) * distance,
                opacity: 0,
                duration: duration,
                ease: 'power2.out',
                onComplete: () => {
                    particle.remove();
                }
            });
        }
    }
    
    // Create particles for a burst effect when a notification disappears
    function createBurstParticles(x, y, count) {
        for (let i = 0; i < count; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            // Random size and opacity
            const size = Math.random() * 6 + 2; // 2-8px
            const opacity = Math.random() * 0.8 + 0.2; // 0.2-1
            
            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;
            particle.style.opacity = opacity;
            particle.style.left = `${x}px`;
            particle.style.top = `${y}px`;
            
            container.appendChild(particle);
            
            // Animate particles outward in a star pattern
            const angle = (i / count) * Math.PI * 2;
            const distance = 30 + Math.random() * 70;
            const duration = 0.5 + Math.random() * 0.7;
            
            gsap.to(particle, {
                x: Math.cos(angle) * distance,
                y: Math.sin(angle) * distance,
                opacity: 0,
                duration: duration,
                ease: 'power2.out',
                onComplete: () => {
                    particle.remove();
                }
            });
        }
    }

    // Start generating notifications
    function startNotifications() {
        // Generate first few notifications immediately
        for (let i = 0; i < 5; i++) {
            setTimeout(() => createNotification(), i * 300);
        }
        
        // Generate notifications periodically with a reasonable limit
        notificationInterval = setInterval(() => {
            // Allow more notifications to build up, only limit at a high number for performance safety
            if (notifications.length < 100) {
                createNotification();
            }
        }, 1000); // Slightly slower interval to allow more build-up
    }

    // Update on resize
    window.addEventListener('resize', () => {
        const viewportHeight = getViewportHeight();
        const safeZoneHeight = viewportHeight - 20; // Account for 20px bottom margin
        
        // Update existing notifications to respect new viewport height
        notifications.forEach(notification => {
            const notificationHeight = notification.offsetHeight;
            const topPos = parseFloat(notification.style.top) || 0;
            const transformY = gsap.getProperty(notification, "y") || 0;
            const bottomEdge = topPos + transformY + notificationHeight;
            
            // If exceeding the safe zone, adjust to safe position
            if (bottomEdge > safeZoneHeight) {
                const safeBottomPosition = safeZoneHeight - notificationHeight;
                const newY = safeBottomPosition - topPos;
                
                gsap.to(notification, {
                    y: newY,
                    duration: 0.3,
                    ease: "power2.out"
                });
            }
        });
    });
    
    // Start generating notifications when page loads
    startNotifications();
}); 